#!/usr/bin/env node

var chalk     = require('chalk');
var filepaths = require('node-filepaths');
var program   = require('commander');
var Inspector = require('../lib/inspector');
var reporters = require('../lib/reporters');

var summary, suppliedPaths, paths, inspector, reporterType;

summary = "  Duplicate code and structure detection for JavaScript.\n"+
          "  Identifier matching is disabled by default. Example use:\n" +
          "  jsinspect -t 30 -i ./path/to/src\n";

program
  .version(require('../package.json').version)
  .usage("[options] <paths ...>\n\n" + summary)
  .option('-t, --threshold <number>',
    'minimum size of nodes (default: 15)', parseInt)
  .option('-i, --identifiers', 'match identifiers')
  .option('-D, --no-diff', 'disable 2-way diffs')
  .option('-C, --no-color', 'disable colors')
  // .option('-r, --reporter [default|json]', 'specify the reporter to use')
  .parse(process.argv);

// Assume all unconsumed arguments are paths
suppliedPaths = program.args || [];
if (!suppliedPaths.length) {
  console.log('Please provide a list of filenames or directories');
  process.exit(0);
}

// chalk doesn't support short flags by default
if (!program.color) {
  chalk.enabled = false;
}

try {
  paths = filepaths.getSync(suppliedPaths, {
    suffix: '.js',
    ignore: 'node_modules'
  });
} catch(e) {
  console.log(e.message);
  process.exit(3);
}

if (!paths.length) {
  console.log('No .js files found in the list of paths');
  process.exit(0);
}

inspector = new Inspector(paths, {
  threshold:   program.threshold,
  diff:        program.diff,
  identifiers: program.identifiers
});

// Retrieve the requested reporter
reporterType = reporters[program.reporter] || reporters.default;
new reporterType(inspector, program.diff);

try {
  process.exit(inspector.run());
} catch(err) {
  console.log(err);
  process.exit(1);
}
