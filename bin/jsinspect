#!/usr/bin/env node

var fs        = require('fs');
var path      = require('path');
var strip     = require('strip-json-comments');
var chalk     = require('chalk');
var filepaths = require('node-filepaths');
var program   = require('commander');
var Inspector = require('../lib/inspector');
var reporters = require('../lib/reporters');

var summary, suppliedPaths, paths, inspector, reporterType;

summary = "  Duplicate code and structure detection for JavaScript.\n"+
          "  Identifier matching is disabled by default. Example use:\n" +
          "  jsinspect -t 30 -i --ignore \"Test.js\" ./path/to/src\n";

program
  .version(require('../package.json').version)
  .usage("[options] <paths ...>\n\n" + summary)
  .option('-t, --threshold <number>',
    'minimum size of nodes (default: 15)', parseInt)
  .option('-i, --identifiers', 'match identifiers')
  .option('-c, --config',
    'path to config file (default: .jsinspectrc)')
  .option('-r, --reporter [default|json|pmd]',
    'specify the reporter to use')
  .option('-D, --no-diff', 'disable 2-way diffs')
  .option('-C, --no-color', 'disable colors')
  .option('--ignore <pattern>', 'ignore paths matching a regex')
  .parse(process.argv);

// Check and parse the config file, if it exists
var rcPath, rcContents, rc, opt;
rcPath = path.resolve(process.cwd(), program.config || '.jsinspectrc');
opts = {encoding: 'utf8'};

if (fs.existsSync(rcPath) && fs.lstatSync(rcPath).isFile()) {
  try {
    rcContents = strip(fs.readFileSync(rcPath, opts));
    rc = JSON.parse(rcContents);
  } catch (e) {
    console.log('Invalid config file:', e.message);
    process.exit(1);
  }

  ['threshold', 'identifiers', 'ignore'].forEach(function(option) {
    if (program[option] === undefined) {
      program[option] = rc[option];
    }
  });
}

// Assume all unconsumed arguments are paths
suppliedPaths = program.args || [];
if (!suppliedPaths.length) {
  console.log('Please provide a list of filenames or directories');
  process.exit(0);
}

// chalk doesn't support short flags by default
if (!program.color) {
  chalk.enabled = false;
}

// Ignore node_modules by default, along with ignore arg
var ignorePatterns = ['node_modules'];
if (program.ignore) {
  ignorePatterns.push(program.ignore);
}

try {
  paths = filepaths.getSync(suppliedPaths, {
    suffix: '.js',
    ignore: ignorePatterns
  });
} catch(e) {
  console.log(e.message);
  process.exit(3);
}

if (!paths.length) {
  console.log('No .js files found in the list of paths');
  process.exit(0);
}

inspector = new Inspector(paths, {
  threshold:   program.threshold,
  diff:        program.diff,
  identifiers: program.identifiers
});

// Retrieve the requested reporter
reporterType = reporters[program.reporter] || reporters.default;
new reporterType(inspector, {
  diff: program.diff,
});

try {
  process.exit(inspector.run());
} catch(err) {
  console.log(err);
  process.exit(1);
}
