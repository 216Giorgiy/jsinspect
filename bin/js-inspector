#!/usr/bin/env node

var chalk     = require('chalk');
var filepaths = require('node-filepaths');
var program   = require('commander');
var Inspector = require('../lib/inspector');
var reporters = require('../lib/reporters');

program
  .version(require('../package.json').version)
  .usage('[options] <paths ...>')
  .option('-i, --identifiers', 'enforce matching identifiers')
  .option('-l, --literals', 'enforce matching literals')
  .option('-f, --fuzzy <number>',
    'max edit distance for fuzzy matching (default: 0)', parseInt)
  .option('-t, --threshold <number>',
    'minimum size of nodes (default: 15)', parseInt)
  .option('-D, --no-diff', 'disable 2-way diffs')
  .option('-C, --no-color', 'disable colors')
  // .option('-r, --reporter [default|json]', 'specify the reporter to use')
  .parse(process.argv);

// Assume all unconsumed arguments are paths
var suppliedPaths = program.args || [];
if (!suppliedPaths.length) {
  console.log('Please provide a list of filenames or directories');
  process.exit(0);
}

// chalk doesn't support short flags by default
if (!program.color) {
  chalk.enabled = false;
}

try {
  var paths = filepaths.getSync(suppliedPaths, {
    suffix: '.js',
    ignore: 'node_modules'
  });
} catch(e) {
  console.log(e.message);
  process.exit(3);
}

if (!paths.length) {
  console.log('No .js files found in the list of paths');
  process.exit(0);
}

var inspector = new Inspector(paths, {
  distance:  program.fuzzy,
  threshold: program.threshold,
  diff:      program.diff
});

// Retrieve the requested reporter
var reporterType = reporters[program.reporter] || reporters.default;
var reporter = new reporterType(inspector, program.diff);

try {
  process.exit(inspector.run());
} catch(err) {
  console.log(err);
  process.exit(1);
}
